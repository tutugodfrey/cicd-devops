version: 2.1

default_image: &default_image
  docker:
    - image: circleci/node:13.8.0
  working_directory: ~/project

amazoncli_image: &amazoncli_image
  docker:
    - image: amazon/aws-cli
  working_directory: ~/project
  
ansible_image: &ansible_image
  docker:
    - image: python:3.7-alpine3.11
  working_directory: ~/project

commands:
  get_backend_ip:
    description: Get the Ip address of the backend server
    steps:
      - run: export BACKEND_IP_ADDRESS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_BE --query "Stacks[*].Outputs[?OutputKey=='BackendIP'].OutputValue" --output text)

  update_ansible_image:
    description: install dependencies in python:3.7-alpine3.11 image
    steps:
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add ansible curl
            pip3 install --upgrade pip
            pip3 install awscli
            aws sts get-caller-identity
            cat ansible/inventory.txt
    
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
            export STACK_NAME_FE=front-end-stack-${CIRCLE_WORKFLOW_ID}
            OUTPUT_KEY=WebsiteBucketName
            export BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_FE --query "Stacks[*].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" --output text)
            echo $BUCKET_NAME
            aws s3 rm s3://$BUCKET_NAME --recursive
            aws cloudformation delete-stack --stack-name $STACK_NAME_BE
            aws cloudformation delete-stack --stack-name $STACK_NAME_FE
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Check migration result stored in memstash
            SUCCESS=$(curl -H "token: 80f3da0c-ae7e-4089-aca3-53714d463f2c" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              ls -al
              npm install
              # Revert any successful migration
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
        
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
  
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install oauth-sign
            npm test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run backend test
          command: |
            cd backend
            npm test
            
  scan-frontend:
    <<: *default_image
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend_build]

      # Your job code here
      - run:
          name: Audit frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
            
  scan-backend:
    <<: *default_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Audit backend
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *amazoncli_image
      
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar util
          command: yum install tar gzip -y

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            export TERM=xterm-color
            export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
            aws cloudformation deploy \
              --template-file cf-stacks/backend.yml \
              --tags project=your-tag \
              --stack-name ${STACK_NAME_BE} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            export TERM=xterm-color
            export STACK_NAME_FE=front-end-stack-${CIRCLE_WORKFLOW_ID}
            aws cloudformation deploy \
              --template-file cf-stacks/frontend.yml \
              --tags project=your-tag \
              --stack-name ${STACK_NAME_FE} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export TERM=xterm-color
            export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
            export STACK_NAME_FE=front-end-stack-${CIRCLE_WORKFLOW_ID}
            export BACKEND_IP_ADDRESS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_BE --query "Stacks[*].Outputs[?OutputKey=='BackendIP'].OutputValue" --output text)
            export INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_BE --query "Stacks[*].Outputs[?OutputKey=='InstanceID'].OutputValue" --output text)
            IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

            echo InstanceIP = $BACKEND_IP_ADDRESS
            echo InstanceId = $INSTANCE_ID
            echo BACKEND_IP=$BACKEND_IP_ADDRESS >> ~/.env
            echo $BACKEND_IP_ADDRESS >> ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt
            - .env

      - destroy-environment

  configure-infrastructure:
    <<: *ansible_image

    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["f7:32:14:af:90:cf:7d:df:ab:c7:ba:e6:d7:10:03:6e"]
      # attach workspace
      - attach_workspace:
          at: ~/

      - update_ansible_image

      - run:
          name: Configure server with ansible
          command: |
            cd ansible
            sed -i "s/TYPEORM_PASSWORD_STRING/${TYPEORM_PASSWORD}/" roles/configure-server/tasks/main.yml
            sed -i "s/TYPEORM_USERNAME_STRING/${TYPEORM_USERNAME}/" roles/configure-server/tasks/main.yml
            sed -i "s/TYPEORM_HOST_STRING/${TYPEORM_HOST}/" roles/configure-server/tasks/main.yml
            sed -i "s/TYPEORM_DATABASE_STRING/${TYPEORM_DATABASE}/" roles/configure-server/tasks/main.yml
            ansible-playbook -i inventory.txt configure-server.yml
            cat roles/configure-server/tasks/main.yml
  
      # Rollback on failure 
      - destroy-environment

  run-migrations:
    <<: *default_image
    steps:
      - checkout
      
      - run:
          name: Install  awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations | tee migration_output.txt
            # Check the exit code of migration
            echo Exit code for migrations is: $?
  
      - run:
          name: Send migration results to memstash
          command: |
            grep "No migrations are pending" backend/migration_output.txt
            if [[ $? == 0 ]]; then curl -H "Content-Type: text/plain" -H "token: 80f3da0c-ae7e-4089-aca3-53714d463f2c" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}; fi;
            echo $(curl -H "token: 80f3da0c-ae7e-4089-aca3-53714d463f2c" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})

      # Rollback on failure
      - destroy-environment

  deploy-frontend:
    <<: *amazoncli_image
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install nodejs
          command: |
            yum install tar gzip -y
            yum install -y gcc-c++ make curl;
            curl -sL https://rpm.nodesource.com/setup_15.x | bash -;
            yum install nodejs -y;

      - attach_workspace:
          at: ~/
          
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
  
      - get_backend_ip

      - run:
          name: Get backend url
          command: |
            cd frontend
            echo BACKEND_IP_ADDRESS IS: $BACKEND_IP_ADDRESS :::::: ${BACKEND_IP_ADDRESS}
            export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
            export BACKEND_IP_ADDRESS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_BE --query "Stacks[*].Outputs[?OutputKey=='BackendIP'].OutputValue" --output text)
            export API_URL="http://${BACKEND_IP_ADDRESS}:3030"
            echo "${API_URL}"
            npm run build

      - run:
          name: Deploy frontend objects
          command: |
            ls -al
            cd frontend
            ls -al dist
            STACK_NAME=front-end-stack-${CIRCLE_WORKFLOW_ID}
            OUTPUT_KEY=WebsiteBucketName
            export BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[*].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" --output text)
            echo $BUCKET_NAME
            aws s3 sync dist/ s3://$BUCKET_NAME/
            OUTPUT_KEY=WebsiteURL
            WEBSITE_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[*].Outputs[?OutputKey=='$OUTPUT_KEY'].OutputValue" --output text)
            cat ~/.env
            echo WEBSITE_URL=$WEBSITE_URL >> ~/.env
            cat ~/.env
            
      - persist_to_workspace:
          root: ~/
          paths:
            - .env
          
      # Rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-backend:
    <<: *ansible_image

    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: ["f7:32:14:af:90:cf:7d:df:ab:c7:ba:e6:d7:10:03:6e"]

      - attach_workspace:
          at: ~/

      - update_ansible_image

      - run:
          name: Copy artifacts to ansible directory
          command: |
            pwd
            mkdir -p ansible/roles/deploy/files
            cat > ansible/roles/deploy/files/.env \<<EOF
            ENVIRONMENT=production
            NODE_ENV=production
            TYPEORM_CONNECTION=postgres
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            MIGRATIONS_DIR=./src/migrations
            TYPEORM_PORT=5432
            TYPEORM_HOST=TYPEORM_HOST_STRING
            TYPEORM_USERNAME=TYPEORM_USERNAME_STRING
            TYPEORM_PASSWORD=TYPEORM_PASSWORD_STRING
            TYPEORM_DATABASE=TYPEORM_DATABASE_STRING
            EOF
            ls backend/dist
            tar -C backend --exclude=node_modules --exclude=coverage -czvf artifact.tar.gz .
            cp artifact.tar.gz ansible/roles/deploy/files

      - run:
          name: Update environment variables
          command: |
            ls -al
            cd ansible
            sed -i "s/TYPEORM_PASSWORD_STRING/${TYPEORM_PASSWORD}/" roles/deploy/files/.env
            sed -i "s/TYPEORM_USERNAME_STRING/${TYPEORM_USERNAME}/" roles/deploy/files/.env
            sed -i "s/TYPEORM_HOST_STRING/${TYPEORM_HOST}/" roles/deploy/files/.env
            sed -i "s/TYPEORM_DATABASE_STRING/${TYPEORM_DATABASE}/" roles/deploy/files/.env
            cat roles/configure-server/tasks/main.yml
        
      - run:
          name: Deploy backend
          command: |
            cd ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
  
      # Rollback on failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    <<: *default_image
  
    steps:
      - checkout

      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt install tar gzip unzip -y
            sudo apt install curl -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            which python3
            which python

      - run:
          name: Get backend url
          command: |
            ls -al
            cat ~/.env
            # export the variables from the ~/.env
            export $(grep BACKEND_IP ~/.env)
            export $(grep WEBSITE_URL ~/.env)

      - run:
          name: Backend smoke test.
          command: |
            cat ~/.env
            export $(grep BACKEND_IP ~/.env)
            echo $BACKEND_IP
            curl http://${BACKEND_IP}:3030/api/status | tee test_be.txt
            grep ok test_be.txt
            if [[ $? == 0 ]]
            then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            cat ~/.env
            export $(grep WEBSITE_URL ~/.env)
            echo $WEBSITE_URL
            curl ${WEBSITE_URL} | tee test_fe.txt
            grep Welcome test_fe.txt
            if [[ $? == 0 ]]
            then
              exit 0
            else
              exit 1
            fi

      # Rollback on failure 
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    <<: *amazoncli_image

    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y gcc-c++ make curl tar gzip;
            curl -sL https://rpm.nodesource.com/setup_15.x | bash -;
            yum install nodejs -y;
      - run:
          name: Get last exported workflow ID from cloudfront stack
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`ID\`].Value" --no-paginate --output text)
            echo OldWorkflowID=$OldWorkflowID >> ~/.env

      - run:
          name: Update cloudfront distribution
          command: |
            cd cf-stacks
            aws cloudformation deploy \
            --stack-name udapeople-cloud-front-stack \
            --template-file cloudfront.yml \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}

      - persist_to_workspace:
          root: ~/
          paths:
            - .env

      # Rollback on failure 
      - destroy-environment
      - revert-migrations

  cleanup:
    <<: *amazoncli_image
    steps:
      - checkout

      - run:
          name: Install nodejs
          command: |
            yum install tar gzip -y
      
      - attach_workspace:
          at: ~/

      - run:
          name: Get old stack workflow id
          command: |
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo STACKS=$STACKS >> ~/.env

      - run:
          name: Remove old EC2 and S3 stacks
          command: |
            export STACKS="$(grep STACKS ~/.env)"
            export "$(grep OldWorkflowID ~/.env)"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              ./clear-resource.sh $OldWorkflowID
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [develop, test-feature-branch, clean-up]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]