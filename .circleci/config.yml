version: 2.1

default_image: &default_image
  docker:
    - image: circleci/node:13.8.0

amazoncli_image: &amazoncli_image
  docker:
    - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            pwd
            ls -al
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install oauth-sign
            npm test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run backend test
          command: |
            cd backend
            npm test
            
  scan-frontend:
    <<: *default_image
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend_build]

      # Your job code here
      - run:
          name: Audit frontend
          command: |
            cd frontend
            npm audit --audit-level=critical
            
  scan-backend:
    <<: *default_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Audit backend
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *amazoncli_image
      
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar util
          command: yum install tar gzip -y

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            export TERM=xterm-color
            export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
            aws cloudformation deploy \
              --template-file cf-stacks/backend.yml \
              --tags project=your-tag \
              --stack-name ${STACK_NAME_BE} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            export TERM=xterm-color
            export STACK_NAME_FE=front-end-stack-${CIRCLE_WORKFLOW_ID}
            aws cloudformation deploy \
              --template-file cf-stacks/frontend.yml \
              --tags project=your-tag \
              --stack-name ${STACK_NAME_FE} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export TERM=xterm-color
            export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
            export STACK_NAME_FE=front-end-stack-${CIRCLE_WORKFLOW_ID}
            export BACKEND_IP_ADDRESS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_BE --query "Stacks[*].Outputs[?OutputKey=='BackendIP'].OutputValue" --output text)
            export INSTANCE_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME_BE --query "Stacks[*].Outputs[?OutputKey=='InstanceID'].OutputValue" --output text)
            IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[*].Instances[*].PublicIpAddress" --output text)

            echo InstanceIP = $BACKEND_IP_ADDRESS
            echo InstanceId = $INSTANCE_ID
            echo $BACKEND_IP_ADDRESS >> ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/inventory.txt
 
      - run:
          name: Rollback - elete Infrastructure on failure
          command: |
            export STACK_NAME_BE=back-end-stack-${CIRCLE_WORKFLOW_ID}
            export STACK_NAME_FE=front-end-stack-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name $STACK_NAME_BE
            aws cloudformation delete-stack --stack-name $STACK_NAME_FE
          when: on_fail
            

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["f7:32:14:af:90:cf:7d:df:ab:c7:ba:e6:d7:10:03:6e"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            ls -al
            apk add --update ansible
            cat project/ansible/inventory.txt
            echo About to install packages
      - run:
          name: Configure server with ansible
          command: |
            # Your code here
            cd ansible
            sed -i 's/TYPEORM_DB_PASSWORD/${TYPEORM_PASSWORD}/' ansible/roles/configure-server/files/config-script.sh
            cat !$
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure      

  # run-migrations:
  #   docker:
  #     # Docker image here that supports NodeJS
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Run migrations
  #         command: |
  #           # Your code here
  #           exit 1
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here
  #           exit 1
  #   # Here's where you will add some code to rollback on failure      

  # deploy-frontend:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # smoke-test:
  #   docker:
  #     # Lightweight Docker image 
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Get backend url
  #         command: |
  #           # your code here
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           # your code here
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [develop, configure-infrastructure, test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]